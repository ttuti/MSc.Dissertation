{
    "contents" : "\npkgload(\"data.table\")\npkgload(\"ReporteRs\")\npkgload(\"grid\")\npkgload(\"ggplot2\")\n\nif (!is.element(\"devtools\", .packages(all.available = T))) install.packages(\"devtools\")\nlibrary(devtools)\n\nload.lib <- \"F:/SCHOOL/Dissertation/DHS Dataset/Data\"\n\ncat(\"\\tLoading data and metadata...\\n\")\n\ncsv.files <- list.files(path= load.lib,recursive=T, pattern=\"*.csv\", full.names = T)\nfor (i in 1:length(csv.files)){\n  last.idx.slash <- regexpr(\"\\\\/[^\\\\/]*$\", csv.files[i])\n  idx <- last.idx.slash[[1]] + 1\n  dataset.name <- substr(csv.files[i],idx,nchar(csv.files[i]))\n  assign(dataset.name, read.csv(csv.files[i]))\n} \n\nsetattr()\n\n\ndata.path <- create.dir.if.missing(file.path(m.project.path, \"data\"))\n# \nwrite.csv(data, paste0(data.path,\"/data.csv\"))\nwrite.csv(metadata, paste0(data.path,\"/metadata.csv\"))\n\nsave(data,metadata,file=\"datastore.rda\")\n\n\ndata <- data.table(read.csv(file=file.path(data.path,\"data.csv\"),as.is=T))\nif (!haskey(data)) {\n  data[, key := .I]\n  setkey(data, key)\n}\n\nplot.data <- data.table::copy(data)\nplot.data <- plot.data[!is.na(hosp_id),(.SD)]\n\nplot.data[, hosp_id := factor(\n  hosp_id,\n  levels = c(51L, 52L, 53L, 54L, 55L, 57L, 58L, 62L, 63L, 64L, 66L, 68L, 70L, 71L),\n  labels = c(\"Kiambu District Hospital\", \"Machakos Level 5 Hospital\", \"Mama Lucy Kibaki Hospital\", \"Mbagathi District Hospital\", \"Kerugoya District Hospital\", \"Karatina District Hospital\", \"Nyeri Provincial General Hospital\", \"Kisumu East District Hospital\", \"Kakamega Provincial General Hospital\", \"Vihiga District Hospital\", \"Busia District Hospital\", \"Kitale District Hospital\", \"Mbale Rural Health DC Hospital\", \"Embu Provincial General Hospital\"))]\n\nplot.data[, outcome_res := factor(\n  outcome_res,\n  levels = c(1L, 2L, 3L, 4L, -1L),\n  labels = c(\"Discharged\", \"Refer\", \"Absconded\", \"Discharged against advice\", \"Empty\"))]\n\nplot.data[, outcome := factor(\n  outcome,\n  levels = c(1L, 2L),\n  labels = c(\"Alive\", \"Died\"))]\n\n#Code neonates\nnewage<-with(plot.data,data.table(cbind(age_days,age_mths,age_years)))\nnewage[is.na(age_days),age_days:=0]\nnewage[is.na(age_mths),age_mths:=0]\nnewage[is.na(age_years),age_years:=0]\n\nif (!haskey(plot.data)) {\n  plot.data[, key := .I]\n  setkey(plot.data, key)\n}\n\nplot.data[,age_in_mths:=sum(c((age_days/30),age_mths,(age_years*12)), na.rm = T),by=key]\n\nplot.data[age_in_mths<=0,age_in_mths:=NA_real_,by=key]\nplot.data[,age_in_mths:=round(age_in_mths,2),by=key]\n\nage.levels <- c(\"<1 month\",\"1-11 months\",\"12-59 months\",\">=60 months\")\nage.factors <- sapply(plot.data$age_in_mths,function(x){\n  level <- NA\n  if(!is.na(x)){  \n    if(x<1){\n      level <- age.levels[1]\n    }else if(x>=1 & x<12){\n      level <- age.levels[2]\n    }else if(x>=12 & x<60){\n      level <- age.levels[3]\n    }else{\n      level <- age.levels[4]\n    }\n  }\n  return(level)\n})\n\nplot.data$age.factors <- factor(age.factors,levels=age.levels)\n\nmetadata=fread(file.path(data.path,\"metadata.csv\"))\n\nfiles.recode<- create.dir.if.missing(file.path(m.rscripts.dir,\"recode\"))\n\nrecode.scripts=c(\"00_main.R\",\"01_summaries.R\",\"02_diagnosis.R\",\"03_venn.R\",\"04_pen.gent.R\",\"05_fever.R\",\"06_malaria.R\",\"07_pneumonia.R\",\"08_dehydration_diarrhoea.R\",\"09_IV_fluids.R\",\"10_zinc.R\",\"11_malnutrition.R\",\"12_menengitis.R\",\"13_bloodtrans.R\",\"14_IV.glucose_measure.R\", \"15_documentation_trends.R\", \"16_Nursing Indicator.R\")\n\ncreate.file(files.recode,recode.scripts)\ncheck.empty.files(directory= files.recode)\n\nfiles.recode <- sort(list.files(file.path(m.rscripts.dir,\"recode\")))\nfiles.recode <- files.recode[order(files.recode)]\nfiles.recode <- files.recode[grepl(\"[[:digit:]{2}]\", files.recode)]\nfiles.recode <- file.path(m.rscripts.dir,\"recode\",files.recode)\nrun.app(files.recode)\n\n#invisible(run.app(files.recode))\n\nHosp.Report[, hospital.id := factor(\n  hospital.id ,\n  levels = c(\"Kiambu DH\", \"Machakos Level 5\", \"Mama Lucy Kibaki H\", \"Mbagathi DH\", \"Kerugoya DH\", \"Karatina DH\", \"Nyeri PGH\", \"Kisumu East DH\", \"Kakamega PGH\", \"Vihiga DH\", \"Busia DH\", \"Kitale DH\", \"Mbale Rural Health DC\", \"Embu PGH\"),\n  labels = c(\"Kiambu District Hospital\", \"Machakos Level 5 Hospital\", \"Mama Lucy Kibaki Hospital\", \"Mbagathi District Hospital\", \"Kerugoya District Hospital\", \"Karatina District Hospital\", \"Nyeri Provincial General Hospital\", \"Kisumu East District Hospital\", \"Kakamega Provincial General Hospital\", \"Vihiga District Hospital\", \"Busia District Hospital\", \"Kitale District Hospital\", \"Mbale Rural Health DC Hospital\", \"Embu Provincial General Hospital\"))]\n\n\nHosp.Report[,full.dataset:=F]\nHosp.Report[!age.less.1month & !is.minimum, full.dataset:=TRUE,by=key]\n\nplot.data <- plot.data[as.Date(plot.data$date_discharge) >= report.start.date &\n                         as.Date(plot.data$date_discharge) <= current.end.period,]\n\n\n# Limit data to specific reporting periods:\n#------------------------------------------\n\nget.period.specific.data <- function(dataset\n                                     ,start.date = NULL\n                                     ,end.date = Sys.Date()\n                                     ,use.adm.date = TRUE\n                                     ,use.disch.date = TRUE\n) {\n  if (!(\"data.table\" %in% class(dataset)\n        & is.data.frame(dataset)))\n    dataset <- data.table(dataset)\n  if (!haskey(dataset))\n    if (!\"key\" %in% names(dataset))\n      dataset[, key := (1 : dataset[, .N])]\n  setkey(dataset, key)\n  tryCatch({\n    if (!is.null(start.date)) {\n      start.date <- as.Date(start.date)\n      if (is.na(end.date))\n        end.date <- NULL\n      end.date\n    }\n  }\n  ,warning = function(w) NULL\n  ,error = function(e) NULL)\n  tryCatch({\n    if (!is.null(end.date)) {\n      end.date <- as.Date(end.date)\n      if (is.na(end.date))\n        end.date <- NULL\n      end.date\n    }\n  }\n  ,warning=function(w) NULL\n  ,error=function(e) NULL)\n  if (isTRUE(!is.null(start.date))) {\n    if(isTRUE(class(start.date) != \"Date\")) {\n      stop(\"Start date is not of type \\\"Date\\\"!\")\n    }\n  }\n  if (isTRUE(!is.null(end.date))) {\n    if(isTRUE(class(end.date) != \"Date\")) {\n      stop(\"End date is not of type \\\"Date\\\"!\")\n    }\n  }\n  if(length(grep(\"^adm.date$\", names(dataset))) == 0L) {\n    warning(\"Admission date not found in reporting dataset!\\nData not subseted!\")\n    return(dataset)\n  }\n  if(length(grep(\"^disch.date$\",names(dataset))) == 0L) {\n    warning(\"Discharge date not found in reporting dataset!\\nData not subseted!\")\n    return(dataset)\n  }\n  if (use.adm.date) {\n    if (!is.null(start.date)) {\n      dataset <- dataset[adm.date >= start.date]\n    }\n    if (!is.null(end.date)) {\n      dataset <- dataset[adm.date <= end.date]\n    }\n  }\n  if (use.disch.date) {\n    if (!is.null(start.date)) {\n      dataset <- dataset[disch.date >= start.date]\n    }\n    if (!is.null(end.date)) {\n      dataset <- dataset[disch.date <= end.date]\n    }\n  }\n  dataset <- dataset[!is.na(adm.date)]\n  dataset <- dataset[!is.na(disch.date)]\n  return(dataset)\n}\n\n\n# Replicate an object and enclose result in a list (for mapply):\n#---------------------------------------------------------------\n\nreplicate.to.list <- function(object.name, n = 1, quote = FALSE)\n{\n  if (quote) {\n    object.name <- paste(\"\\\"\", object.name, \"\\\"\", sep = \"\")\n  }\n  code <- rep(object.name, n)\n  code <- paste(code, collapse = \",\")\n  code <- paste(\"list(\", code, \")\", sep = \"\")\n  eval(parse(text = code))\n}\n\n# Extract Report Info from Dataset (Uses AOP):\n#---------------------------------------------\n\nget.reporting.info <- function(dataset) {\n  \n  # Check if dataset is a data table:\n  # ---------------------------------\n  \n  if (!haskey(dataset)) {\n    if (!\"key\" %in% names(dataset))\n      dataset[, key := .I]\n    setkey(dataset, key)\n  }\n  dataset<- dataset[, .SD,.SDcols=names(dataset)[!(grepl(\".plot\", names(dataset)))]]\n  \n  # Inject attributes to dataset:\n  # -----------------------------\n  m.report.aop.ds.table<-m.report.aop.ds[(variable%in% variable[!(grepl(\".plot\", m.report.aop.ds[,variable]))]), .SD]\n  generate.attribute.script(m.report.aop.ds.table, \"dataset\", m.report.aop.script.location)\n  source(m.report.aop.script.location, local = TRUE)\n  \n  # Get attributes:\n  # ---------------\n  \n  # Get prefix labels\n  \n  ind <- sapply(dataset, function(x) {\n    z <- get.variable.prefix.label(x)\n    if (class(x) %in% c(\"numeric\", \"integer\"))\n      z <- rep(z, 3L)\n    return(z)\n  })\n  if (class(ind) == \"list\")\n    ind <- unlist(ind)\n  \n  # Get level labels\n  \n  lev <- sapply(dataset, function(x) {\n    z <- get.variable.labelling(x)\n    if (class(x) %in% c(\"numeric\", \"integer\")) {\n      z <-  c(\"Maximum\", \"Minimum\", \"Median\")\n    }\n    return(z)\n  })\n  if (class(lev) == \"list\")\n    lev <- unlist(lev)\n  \n  # Get bookmarks\n  \n  bkm <- sapply(dataset, function(x) {\n    z <-get.variable.bookmark(x)\n    if (class(x) %in% c(\"numeric\", \"integer\")) {\n      z <- rep(z, 3L)\n    }\n    return(z)\n  })\n  if (class(bkm) == \"list\")\n    bkm <- unlist(bkm)\n  \n  # Get proportions\n  \n  prop <- sapply(dataset, function(x) {\n    z <- get.variable.calc.prop(x, dataset)\n    if (class(x) %in% c(\"numeric\", \"integer\")) {\n      z <- rep(z, 3L)\n    }\n    return(z)\n  })\n  if (class(prop) == \"list\")\n    prop <- unlist(prop)\n  \n  # Get color codes\n  \n  cols <- sapply(dataset, function(x) {\n    z <- get.variable.color.code(x, dataset)\n    if (class(x) %in% c(\"numeric\", \"integer\")) {\n      z <- rep(z, 3L)\n    }\n    return(z)\n  })\n  \n  if (class(cols) == \"list\")\n    cols <- unlist(cols)\n  \n  # Get values\n  \n  sapply(dataset, function(v) {\n    ret.val <- NA\n    if (class(v) == \"logical\") {\n      ret.val <- table(v)[\"TRUE\"]\n      ret.val <- ifelse(is.na(ret.val), 0L, ret.val)\n      names(ret.val) <- NULL\n    }\n    else if (class(v) %in% c(\"numeric\", \"integer\"))\n    {\n      if(isTRUE(all(is.na(v)))){\n        v[is.na(v)]<-0L\n      }\n      ret.val <- round(c(max(v, na.rm=TRUE), min(v, na.rm=TRUE), median(v, na.rm = TRUE)),  2L)\n      names(ret.val) <- c(\"Maximum\", \"Minimum\", \"Median\")\n      ret.val[ret.val %in% c(Inf, -Inf)]<-0L\n    }\n    return(ret.val)\n  }) -> ret.val\n  ret.val <- unlist(ret.val)\n  # Generate report info data table\n  \n  ret.val <- data.table(Indicator = ind\n                        , Level = lev\n                        , Value = ret.val\n                        , Proportions = prop\n                        , Col = cols\n                        , Bookmark = bkm)\n  ret.val <- data.table::copy(ret.val[!is.na(Bookmark)])\n  ret.val[, key := .I]\n  setkey(ret.val, key) \n  \n  # Reshape values and proportions\n  \n  ret.val[!is.na(Value) & (Level %in% c(\"Maximum\", \"Minimum\", \"Median\")), \n          Proportions:=as.character(round(Value,2)), \n          by = list(Bookmark, Level, Indicator)]\n  ret.val[!is.na(Value) & (!Level %in% c(\"Maximum\", \"Minimum\", \"Median\")) & Proportions == \"\", \n          Proportions:=paste0(\"n = \", as.character(round(Value,0))), \n          by = list(Bookmark, Level, Indicator)]\n  ret.val <- ret.val[!is.na(Value)]\n  ret.val <- split(ret.val, ret.val[, Bookmark])\n  \n  # Remove Indicator column where its irrelevant\n  \n  ret.val <- lapply(ret.val, function(x) {\n    x = data.table::copy(x)\n    if (all(x[, Indicator] == \"\")) {\n      x[, Indicator := NULL]\n    }\n    x[, Bookmark := NULL]\n    x[, key := NULL]\n    return(x)\n  })\n  \n  return(ret.val)\n  \n}\n\nget.reporting.info.combined <- function(dataset) {\n  \n  # Check if dataset is a data table:\n  # ---------------------------------\n  \n  if (!haskey(dataset)) {\n    if (!\"key\" %in% names(dataset))\n      dataset[, key := .I]\n    setkey(dataset, key)\n  }\n  \n  # Inject attributes to dataset:\n  # -----------------------------\n  dataset <- dataset[, .SD, .SDcols = aop.data.source[, variable]]\n  local.aop <- aop.data.source[is.na(aop.data.source$scoregraph),]\n  generate.attribute.script(local.aop, \"dataset\", m.report.aop.script.location)\n  source(m.report.aop.script.location, local = TRUE)\n  \n  # Get attributes:\n  # ---------------\n  \n  # Get prefix labels\n  \n  ind <- sapply(dataset, function(x) {\n    z <- get.variable.prefix.label(x)\n    if (class(x) %in% c(\"numeric\", \"integer\"))\n      z <- rep(z, 2L)\n    return(z)\n  })\n  if (class(ind) == \"list\")\n    ind <- unlist(ind)\n  \n  # Get level labels\n  \n  lev <- sapply(dataset, function(x) {\n    z <- get.variable.labelling(x)\n    if (class(x) %in% c(\"numeric\", \"integer\")) {\n      z <- c(\"Mean\", \"Median\")\n    }\n    return(z)\n  })\n  if (class(lev) == \"list\")\n    lev <- unlist(lev)\n  \n  # Get bookmarks\n  \n  bkm <- sapply(dataset, function(x) {\n    z <-get.variable.bookmark(x)\n    if (class(x) %in% c(\"numeric\", \"integer\")) {\n      z <- rep(z, 2L)\n    }\n    return(z)\n  })\n  if (class(bkm) == \"list\")\n    bkm <- unlist(bkm)\n  \n  # Get proportions\n  \n  prop <- sapply(dataset, function(x) {\n    z <- get.variable.calc.prop(x, dataset)\n    if (class(x) %in% c(\"numeric\", \"integer\")) {\n      z <- rep(z, 2L)\n    }\n    return(z)\n  })\n  if (class(prop) == \"list\")\n    prop <- unlist(prop)\n  \n  # Get color codes\n  \n  cols <- sapply(dataset, function(x) {\n    z <- get.variable.color.code(x, dataset)\n    if (class(x) %in% c(\"numeric\", \"integer\")) {\n      z <- rep(z, 2L)\n    }\n    return(z)\n  })\n  if (class(cols) == \"list\")\n    cols <- unlist(cols)\n  \n  # Get show figures\n  \n  show.fig <- sapply(dataset, function(x) {\n    z <-get.variable.show.fig(x)\n    if (class(x) %in% c(\"numeric\", \"integer\")) {\n      z <- rep(z, 2L)\n    }\n    return(z)\n  })\n  if (class(show.fig) == \"list\")\n    show.fig <- unlist(show.fig)\n  \n  # Get values\n  \n  sapply(dataset, function(v) {\n    ret.val <- NA\n    if (class(v) == \"logical\") {\n      ret.val <- table(v)[\"TRUE\"]\n      ret.val <- ifelse(is.na(ret.val), 0L, ret.val)\n      names(ret.val) <- NULL\n    }\n    else if (class(v) %in% c(\"numeric\", \"integer\"))\n    {\n      ret.val <- round(c(mean(v, na.rm = T), median(v, na.rm = TRUE)), 1L)\n      names(ret.val) <- c(\"Mean\", \"Median\")\n    }\n    return(ret.val)\n  }) -> ret.val\n  ret.val <- unlist(ret.val)\n  # Generate report info data table\n  \n  ret.val <- data.table(Indicator = ind\n                        , Level = lev\n                        , Value = ret.val\n                        , Proportions = prop\n                        , Col = cols\n                        , Bookmark = bkm\n                        , Figure = show.fig)\n  ret.val <- data.table::copy(ret.val[!is.na(Bookmark)])\n  ret.val[, key := .I]\n  setkey(ret.val, key) \n  \n  # Reshape values and proportions\n  \n  ret.val[!is.na(Value) & (Level %in% c(\"Mean\", \"Median\")), \n          Proportions:=as.character(round(Value,1)), \n          by = list(Bookmark, Indicator, Level)]\n  ret.val[!is.na(Value) & (!Level %in% c(\"Mean\", \"Median\")) & Proportions == \"\", \n          Proportions:=paste0(\"n = \", as.character(round(Value,0))), \n          by = list(Bookmark, Indicator, Level)]\n  ret.val <- ret.val[!is.na(Value)]\n  ret.val <- split(ret.val, ret.val[, Bookmark])\n  \n  # Remove Indicator column where its irrelevant\n  ret.val <- lapply(ret.val, function(x) {  \n    x <- data.frame(x)\n    \n    if (all(x$Indicator == \"\")) {\n      x$Indicator <- NULL\n    }\n    x$Bookmark <- NULL\n    x$key <- NULL\n    x <- data.table(x)\n    return(x)\n  })\n  return(ret.val)\n  \n}\n\n\n# Generic function to extact a specific attribute value:\n#-------------------------------------------------------\n\nget.attribute.value <- function(x, attrib) {\n  atts <- attributes(x)\n  if (any(grepl(attrib, names(atts)))) {\n    ret.val <- atts[[attrib]]\n  }\n  else {\n    ret.val <- NA\n  }\n  return(ret.val)\n}\n\n# Get variable labelling:\n#------------------------\n\nget.variable.labelling <- function(x) {\n  lab <- get.attribute.value(x, \"label\")\n  lab <- ifelse(is.na(lab), \"\", lab)\n  lab <- ifelse(identical(lab, get.variable.prefix.label(x)), \"\", lab)\n  return(lab)\n}\n\n# Get bookmark (MS Word) of the table the variable is associated with:\n#---------------------------------------------------------------------\n\nget.variable.bookmark <- function(x) {\n  bkmk <- get.attribute.value(x, \"bookmark\")\n  return(bkmk)\n}\n\n# Get prefix label for the table the variable is associated with:\n#----------------------------------------------------------------\n\nget.variable.prefix.label <- function(x) {\n  prf <- get.attribute.value(x, \"prefix\")\n  prf <- ifelse(is.na(prf),\"\",prf)\n  return(prf)\n}\n\n# Get color code for the table the variable is associated with:\n#--------------------------------------------------------------\n\nget.variable.color.code <- function(x, dataset) {\n  clr <- get.attribute.value(x, \"color\")\n  clr.l <- ifelse(is.na(clr), FALSE, clr)\n  if (clr.l) {\n    clr.v <- get.cell.color(get.variable.calc.prop(x, dataset, format= FALSE) / 100L)\n  }\n  else\n  {\n    clr.v <- \"#FFFFFF\"\n  }\n  return(clr.v)\n}\n\n# Get formatted proportions code for the table the variable is associated with:\n#------------------------------------------------------------------------------\n\nget.variable.calc.prop <- function(x, dataset, format=TRUE) {\n  prp <- get.attribute.value(x, \"get.prop\")\n  prp.l <- ifelse(is.na(prp), FALSE, prp)\n  if (prp.l) {\n    den.v <- get.variable.denom(x, dataset)\n    prop.v <- table(x)[\"TRUE\"]\n    prop.v <- ifelse(is.na(prop.v), 0L, prop.v)\n    val.v <- round(prop.v, 0L)\n    if (den.v == 0L)\n      prop.v <- 0L\n    else\n      prop.v <- round((prop.v / den.v) * 100L, 2L)\n    if (format)\n      prop.v <- paste0(val.v, \"/\", den.v, \" (\", prop.v, \"%)\")\n  }\n  else\n  {\n    if (format) { prop.v <- \"\" }\n    else { prop.v <- NA }\n  }\n  return(prop.v)\n}\n\n#Get denominator for proportion calculations\n\nget.variable.denom <- function(x, dataset) {\n  #browser()\n  den <- get.attribute.value(x, \"denom\")\n  # TODO : Get denom for data table\n  den.l <- ifelse(is.na(den), FALSE, TRUE)\n  if (den.l) {\n    den.v <- dataset[, .N, by = den]\n    true <- grep(\"TRUE\", as.matrix(den.v)[, 1L])\n    if (length(true) == 0L) \n      den.v <- 0L\n    else\n      den.v <- den.v[true, N]\n    names(den.v) <- \"denom\"\n  }\n  else {\n    den.v <- NA\n    names(den.v) <- \"denom\"\n  }\n  return(den.v)\n}\n\nget.variable.show.fig <- function(x) {\n  show.fig <- get.attribute.value(x, \"show.fig\")\n  return(show.fig)\n}\n\nget.variable.scoregraph <- function(x) {\n  show.fig <- get.attribute.value(x, \"scoregraph\")\n  return(show.fig)\n}\n\n\n# Get name of venn (bookmark) associated with a variable:\n#--------------------------------------------------------\n\nget.variable.venn <- function(x)\n{\n  vnn <- get.attribute.value(x, \"venn\")\n  vnn <- ifelse(is.na(vnn), NA, vnn)\n  return(vnn)\n}\n\n# Check whether a variable exists in a dataset:\n#----------------------------------------------\n\ncheck.if.variable.exists <- function(dataset, col.name) {\n  col.name <- paste0(\"^\", col.name, \"$\")\n  ret.val <- any(regexpr(col.name, colnames(dataset)) > 0L)\n  return(ret.val)\n}\n\n# Validate entries in AOP dictionary:\n#------------------------------------\n\nvalidate.aop.dictionary <- function(dataset) {\n  \n  # Structure dataset\n  \n  if (!\"data.table\" %in% class(dataset))\n    dataset <- data.table(dataset)\n  if (!haskey(dataset)) {\n    if (!\"key\" %in% names(dataset))\n      dataset[, key := (1 : dataset[, .N])]\n    setkey(dataset, key)\n  }\n  if (!all(c(\"variable\", \"label\", \"prefix\", \"bookmark\", \"color\", \"get.prop\", \"denom\", \"venn\", \"trend\") %in% colnames(dataset)))\n    stop(\"Some required columns are missing!\")\n  dataset <- dataset[, list(key, variable, label, prefix, bookmark, color, get.prop, denom, venn, trend)]\n  \n  # Verify all variables that require proportions have a denominator specified\n  \n  valid <- all(dataset[!is.na(denom), get.prop])\n  if (!valid) \n    stop(\"Some variables require proportion calculations yet no denominator has been specified!\\n\"\n         ,\"Please rectify before proceeding\")\n  \n  # Verify all variables that do not require proportions should not have a denominator specified\n  \n  valid <- all(!dataset[is.na(denom), get.prop])\n  if (!valid)  {\n    dataset[get.prop == FALSE, denom := NA_character_]\n    message(\"Some variables that do not require proportion calculations have denominators specified!\\n\"\n            ,\"These have been reset to missing!\")\n  }\n  \n  # Check that all venn variables have proportion calculations specified\n  \n  valid <- all(dataset[!is.na(venn), get.prop])\n  if (!valid) \n    stop(\"Some variables needed for venn diagram dont have proportion calculations specified!\\n\"\n         ,\"Please rectify before proceeding\")\n  \n  # Check that all variables to be coloured have proportion calculations specified\n  \n  valid <- all(dataset[color == TRUE, get.prop])\n  if (!valid) \n    stop(\"Some variables to be color coded dont have proportion calculations specified!\\n\"\n         ,\"Please rectify before proceeding\")\n  \n  # Check that all denom variables exist\n  # browser()\n  valid <- dataset[!is.na(denom), unique(denom)]\n  valid <- all(valid %in% dataset[, variable])\n  if (!valid) \n    stop(\"Some denominator variables do not match any variable specified!\\n\"\n         ,\"Please rectify before proceeding\")\n  \n  #Check that all variables and labels are specified\n  \n  valid <- dataset[is.na(variable) | is.na(label)]\n  valid <- identical(valid[, .N], 0L)\n  if (!valid) stop(\"Some variables and labels are missing!\\n\"\n                   ,\"Please rectify before proceeding\")\n  dataset[, bookmark := as.character(bookmark)]\n  return(dataset)\n}\n\nvalidate.aop.dictionary.combined <- function(dataset) {\n  \n  dataset$venn <- gsub(\"NA\",NA_character_,dataset$venn)\n  # Structure dataset\n  \n  if (!\"data.table\" %in% class(dataset))\n    dataset <- data.table(dataset)\n  if (!haskey(dataset)) {\n    if (!\"key\" %in% names(dataset))\n      dataset[, key := (1 : dataset[, .N])]\n    setkey(dataset, key)\n  }\n  if (!all(c(\"variable\", \"label\", \"prefix\", \"bookmark\", \"color\", \"get.prop\", \"denom\", \"venn\",\"scoregraph\",\"show.fig\") %in% colnames(dataset)))\n    stop(\"Some required columns are missing!\")\n  dataset <- dataset[, list(key, variable, label, prefix, bookmark, color, get.prop, denom, venn, scoregraph,show.fig)]\n  \n  # Verify all variables that require proportions have a denominator specified\n  \n  valid <- all(dataset[!is.na(denom) & is.na(scoregraph), get.prop])\n  if (!valid) \n    stop(\"Some variables require proportion calculations yet no denominator has been specified!\\n\"\n         ,\"Please rectify before proceeding\")\n  \n  # Verify all variables that do not require proportions should not have a denominator specified\n  \n  valid <- all(!dataset[is.na(denom) & !is.na(scoregraph), get.prop])\n  if (!valid)  {\n    dataset[get.prop == FALSE, denom := NA_character_]\n    message(\"Some variables that do not require proportion calculations have denominators specified!\\n\"\n            ,\"These have been reset to missing!\")\n  }\n  \n  # Check that all venn variables have proportion calculations specified\n  \n  valid <- all(dataset[!is.na(venn), get.prop])\n  if (!valid) \n    stop(\"Some variables needed for venn diagram dont have proportion calculations specified!\\n\"\n         ,\"Please rectify before proceeding\")\n  \n  # Check that all variables to be coloured have proportion calculations specified\n  \n  valid <- all(dataset[color == TRUE, get.prop])\n  if (!valid) \n    stop(\"Some variables to be color coded dont have proportion calculations specified!\\n\"\n         ,\"Please rectify before proceeding\")\n  \n  # Check that all denom variables exist\n  valid <- dataset[!is.na(denom), unique(denom)]\n  valid <- all(valid %in% dataset[, variable])\n  if (!valid) \n    stop(\"Some denominator variables do not match any variable specified!\\n\"\n         ,\"Please rectify before proceeding\")\n  \n  #Check that all variables and labels are specified\n  \n  valid <- dataset[is.na(variable) | is.na(label)]\n  valid <- identical(valid[, .N], 0L)\n  if (!valid) stop(\"Some variables and labels are missing!\\n\"\n                   ,\"Please rectify before proceeding\")\n  dataset[, bookmark := as.character(bookmark)]\n  return(dataset)\n}\n\n# Generate script from AOP dictionary to plugin attributes into dataset:\n#-----------------------------------------------------------------------\n\ngenerate.attribute.script <- function(aop.dataset, dataset.name, script.location) {\n  \n  #Force evaluation of dataset name promise\n  \n  dataset.name <- as.character(dataset.name)\n  \n  # Renew file connnection\n  \n  if (file.exists(script.location))\n    unlink(script.location, force = TRUE)\n  file.create(script.location)\n  \n  # Generate header part of script (ensures dataset exists)\n  \n  reset.tab()\n  script <- paste0(\"in.current.env <- exists(\\\"\", dataset.name, \"\\\")\\n\")\n  script <- paste0(script, \"if (in.current.env) {\\n\")\n  add.tab()\n  script <- paste0(script, get.tab() , dataset.name, \" <- data.table::copy(get(\\\"\", dataset.name, \"\\\"))\")\n  remove.tab()\n  script <- paste0(script, \"\\n}\\n\")\n  script <- paste0(script, get.tab(), \"if (!in.current.env) {\\n\")\n  add.tab()\n  script <- paste0(script, get.tab(), \"in.parent.env <- exists(\\\"\", dataset.name, \"\\\", envir = -2)\\n\")\n  script <- paste0(script, get.tab(), \"if (in.parent.env) \")\n  script <- paste0(script, get.tab(), \"{\\n\")\n  add.tab()\n  script <- paste0(script, get.tab(), dataset.name, \" <- data.table::copy(get(\\\"\", dataset.name, \"\\\", envir = -2))\\n\")\n  remove.tab()\n  script <- paste0(script, get.tab(), \"}\\n\")\n  script <- paste0(script, get.tab(), \"rm(in.parent.env)\\n\")\n  remove.tab()\n  script <- paste0(script, get.tab(),\"}\\nrm(in.current.env)\\n\")\n  reset.tab()\n  cat(script, file = script.location, append = FALSE)\n  rm(script)\n  \n  # Generate variable level attributes code\n  \n  gen.atts <- function(row) {\n    #browser()\n    reset.tab()\n    code <- paste0(\"var.exists <- check.if.variable.exists(get(\\\"\", dataset.name, \"\\\"), \\\"\", row[, variable], \"\\\")\\n\")\n    code <- paste0(code, \"if (var.exists) {\\n\")\n    add.tab()\n    code <- paste0(code, get.tab(), \n                   ifelse(is.na(row[, label])\n                          ,paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"label\\\", NA_character_)\\n\")\n                          ,paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"label\\\", \\\"\", row[, label], \"\\\")\\n\")\n                   )\n    )\n    code <- paste0(code, get.tab(), \n                   ifelse(is.na(row[, prefix])\n                          ,paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"prefix\\\", NA_character_)\\n\")\n                          ,paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"prefix\\\", \\\"\", row[, prefix], \"\\\")\\n\")\n                   )\n    )\n    code <- paste0(code, get.tab(),\n                   ifelse(is.na(row[, bookmark])\n                          ,paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"bookmark\\\", NA_character_)\\n\")\n                          ,paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"bookmark\\\", \\\"\", row[, bookmark], \"\\\")\\n\")\n                   )\n    )\n    code <- paste0(code, get.tab(), \n                   paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"color\\\", \", row[, color], \")\\n\")\n    )\n    code <- paste0(code, get.tab(), \n                   paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"get.prop\\\", \", row[, get.prop], \")\\n\"\n                   )\n    )\n    code <- paste0(code, get.tab(), \n                   ifelse(is.na(row$denom)\n                          ,paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"denom\\\", NA_character_)\\n\")\n                          ,paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"denom\\\", \\\"\", row[, denom], \"\\\")\\n\")\n                   )\n    )\n    code <- paste0(code, get.tab(), \n                   ifelse(is.na(row$venn)\n                          ,paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"venn\\\", NA_character_)\\n\")\n                          ,paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"venn\\\", \\\"\", row[, venn], \"\\\")\\n\")\n                   )\n    )\n    code <- paste0(code, get.tab(), \n                   ifelse(is.na(row$scoregraph)\n                          ,paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"scoregraph\\\", NA_character_)\\n\")\n                          ,paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"scoregraph\\\", \\\"\", row[, scoregraph], \"\\\")\\n\")\n                   )\n    )\n    code <- paste0(code, get.tab(), \n                   paste0(\"setattr(\", dataset.name, \"$\", row[, variable], \", \\\"show.fig\\\", \", row[, show.fig], \")\\n\")\n    )\n    remove.tab()\n    code <- paste0(code, get.tab(), \"}\\nif (!var.exists){\\n\")\n    add.tab()\n    code <- paste0(code, get.tab(), \"message(\\\"Variable '\", row[, variable], \n                   \"' does not exist in this dataset ['\", dataset.name, \"']!\\\")\\n}\\n\")\n    reset.tab()\n    cat(code, file = script.location, append = TRUE)\n  }\n  \n  code <- aop.dataset[, gen.atts(.SD), by = key]\n  \n  generate.header.comment(\"Autogenerated AOP plugins\", script.location)\n}\n\n#Get venn and pareto counts from dataset (Used for plotting)\n\n#class pareto\nParetoCounts = setClass(\"ParetoCounts\",\n                        , slots = c(\n                          \"data\" = \"data.table\",\n                          \"opts\" = \"list\"\n                        )\n                        ,prototype = prototype(\n                          data = data.table(),\n                          opts = list()\n                        )\n)\n\n#pareto plotting\n\nget.pareto.dataset <- function(dataset)\n{\n  # Convert x to data table\n  \n  if (\"list\" %in% class(dataset))\n    dataset <- dataset[[1]]\n  if (!\"data.table\" %in% class(dataset))\n    dataset <- data.table(dataset)\n  \n  # Plugin attributes\n  \n  generate.attribute.script(m.report.aop.ds, \"dataset\", m.report.aop.script.location)\n  source(m.report.aop.script.location, local = TRUE)\n  \n  pareto.variables <- m.report.aop.ds[venn==\"adm_venn\", variable]\n  pareto.groups <- m.report.aop.ds[venn==\"adm_venn\", venn]\n  pareto.variables <- split(pareto.variables, pareto.groups)\n  lapply(pareto.variables, function(x) {\n    #browser()\n    x <- x[!grepl(\"other\", x)]\n    pareto.ds <- dataset[, .SD, , .SDcols = x]\n    top<- sapply(x, function(cl) {\n      return(eval(parse(text=paste0(\"table(dataset[, \", cl, \" == TRUE])\"))))\n    })\n    if (is.list(top)) {\n      top <- vapply(top, function(x) {\n        res = x[\"TRUE\"]\n        if (is.na(res)) res = 0\n        res}, double(1))\n      \n    } else if (is.matrix(top)) {\n      top <- apply(top, 2, function(x) {\n        res = x[\"TRUE\"]\n        if (is.na(res)) res = 0\n        res\n      })\n    } else {\n      if (all(sapply(names(top), function(n) grepl('.FALSE$', n)))) {\n        ns = sapply(names(top), function(n) gsub('.FALSE$', '', n))\n        top = rep(0, length(ns))\n        names(top) = ns\n      }\n    }\n    top[is.na(top)]<-0\n    top <- top[order(-top)]\n    top.10<-names(top)[1:10]\n    pareto.ds.top.10 <- pareto.ds[, .SD, .SDcols = top.10]\n    labs <-sapply(pareto.ds.top.10, get.variable.labelling)\n    setnames(pareto.ds.top.10, labs)\n    top.10<-names(pareto.ds.top.10)[1:10]\n    episode.counts <- pareto.ds.top.10[,colSums(.SD),.SDcols=top.10]\n    top.ten.episode <- episode.counts\n    cumilative.episode.counts <- sum(episode.counts)\n    cumm.sum<-cumsum(top.ten.episode)\n    counts.percent<-sapply(cumm.sum,function(x,y){\n      return( round((x/y)*100,1) )\n    },cumilative.episode.counts)\n    pareto.results<- data.table(label=names(top.ten.episode), percent=counts.percent, counts=top.ten.episode)\n    pareto.results <- pareto.results[order(pareto.results$counts, decreasing=TRUE),]\n    pareto.results$label <- factor(pareto.results$label, levels=pareto.results$label)\n    pareto.results<-ParetoCounts(data=pareto.results)\n  })->pareto\n  return(pareto)\n}\n\n#Venn for plotting\n\nget.venn.dataset <- function(dataset)\n{\n  \n  # Convert x to data table\n  \n  if (\"list\" %in% class(dataset))\n    dataset <- dataset[[1]]\n  if (!\"data.table\" %in% class(dataset))\n    dataset <- data.table(dataset)\n  \n  # Plugin attributes\n  \n  generate.attribute.script(m.report.aop.ds, \"dataset\", m.report.aop.script.location)\n  source(m.report.aop.script.location, local = TRUE)\n  \n  venn.variables <- m.report.aop.ds[!is.na(venn), variable]\n  venn.groups <- m.report.aop.ds[!is.na(venn), venn]\n  venn.variables <- split(venn.variables, venn.groups)\n  lapply(venn.variables, function(x) {\n    #browser()\n    x <- x[!grepl(\"other\", x)]\n    venn.ds <- dataset[, .SD, , .SDcols = x]\n    top<- sapply(x, function(cl) {\n      return(eval(parse(text=paste0(\"table(dataset[, \", cl, \" == TRUE])\"))))\n    })\n    if (is.list(top)) {\n      top <- vapply(top, function(x) {\n        res = x[\"TRUE\"]\n        if (is.na(res)) res = 0\n        res}, double(1))\n      \n    } else if (is.matrix(top)) {\n      top <- apply(top, 2, function(x) {\n        res = x[\"TRUE\"]\n        if (is.na(res)) res = 0\n        res\n      })\n    } else {\n      if (all(sapply(names(top), function(n) grepl('.FALSE$', n)))) {\n        ns = sapply(names(top), function(n) gsub('.FALSE$', '', n))\n        top = rep(0, length(ns))\n        names(top) = ns\n      }\n    }\n    top[is.na(top)]<-0\n    top <- top[order(-top)]\n#top4\n    top.4 <- names(top)[1:4]\n    venn.ds.top.4 <- venn.ds[, .SD, .SDcols = top.4]\n    episodes <- get.episode.counts.venn.4(venn.ds.top.4)\n    denom <- dataset[, .N]\n    othr.episodes <- denom - sum(episodes)\n    episodes <- round(c(othr.episodes, episodes), 0)\n    episodes.p <- round(episodes*100/denom, 2)\n    episodes <- paste0(episodes, \" (\", episodes.p, \"%)\")\n    episodes[1] <- paste0(\"Not in top 4\\n\", episodes[1])\n    venn.mat <- cbind(get.venn.mat(),episodes)\n    labs <- c(sapply(venn.ds.top.4, get.variable.labelling), \"Counts\")\n    colnames(venn.mat) <- labs\n    class(venn.mat)<-\"VennCounts\"\n    return(venn.mat)\n  }) -> venn.results\n  return(venn.results)\n}\n\n\n#Get episode counts based on 4X4 combination of the top 4 diseases (Used as venn data source)\nget.episode.counts.venn.4 <- function(dataset)\n{\n  if (!\"data.table\" %in% class(dataset))\n    dataset <- data.table(dataset)\n  disease.list <- names(dataset)\n  #Singles\n  disease.only <- sapply(disease.list, function(x) {\n    dis.code <- paste0(\"dataset[, \", x, \" == TRUE]\")\n    othr.code <- disease.list[!disease.list %in% x]\n    othr.code <- paste0(\"dataset[, \", othr.code, \" == FALSE]\")\n    othr.code <-paste0(othr.code, collapse=\" & \")\n    other.code <- paste0(\"(\", othr.code, \")\")\n    all.code <- paste0(\"table(\", dis.code, \" & \", othr.code, \")[\\\"TRUE\\\"]\")\n    counts1 <- eval(parse(text=all.code))\n    counts1[is.na(counts1)] <- 0\n    return(counts1)\n  })\n  names(disease.only) <- NULL\n  #Pairs\n  disease.pair <- combn(disease.list, 2)\n  disease.pair <- apply(disease.pair, 2, function(x) {\n    dis.code <- paste0(\"dataset[, \", x, \" == TRUE]\")\n    dis.code <-paste0(dis.code, collapse=\" & \")\n    dis.code <- paste0(\"(\", dis.code, \")\")\n    othr.code <- disease.list[!disease.list %in% x]\n    othr.code <- paste0(\"dataset[, \", othr.code, \" == FALSE]\")\n    othr.code <-paste0(othr.code, collapse=\" & \")\n    other.code <- paste0(\"(\", othr.code, \")\")\n    all.code <- paste0(\"table(\", dis.code, \" & \", othr.code, \")[\\\"TRUE\\\"]\")\n    counts2 <- eval(parse(text=all.code))\n    counts2[is.na(counts2)] <- 0\n    return(counts2)\n  })\n  names(disease.pair) <- NULL\n  #Trios\n  disease.trio <- combn(disease.list, 3)\n  disease.trio <- apply(disease.trio, 2, function(x) {\n    dis.code <- paste0(\"dataset[, \", x, \" == TRUE]\")\n    dis.code <-paste0(dis.code, collapse=\" & \")\n    dis.code <- paste0(\"(\", dis.code, \")\")\n    othr.code <- disease.list[!disease.list %in% x]\n    othr.code <- paste0(\"dataset[, \", othr.code, \" == FALSE]\")\n    othr.code <-paste0(othr.code, collapse=\" & \")\n    other.code <- paste0(\"(\", othr.code, \")\")\n    all.code <- paste0(\"table(\", dis.code, \" & \", othr.code, \")[\\\"TRUE\\\"]\")\n    counts3 <- eval(parse(text=all.code))\n    counts3[is.na(counts3)] <- 0\n    return(counts3)\n  })\n  names(disease.trio) <- NULL\n  disease.all <- paste0(\"(dataset[, \", disease.list, \" == TRUE])\")\n  disease.all <- paste(disease.all, collapse = \" & \")\n  disease.all <- table(eval(parse(text=disease.all)))[\"TRUE\"]\n  if (is.na(disease.all))\n    disease.all <- 0\n  names(disease.all)<-NULL\n  ret.val <- c(disease.only, disease.pair, disease.trio, disease.all)\n  return(ret.val)\n}\n#Dummy to return binary matrix depicting 4X4 combinations\nget.venn.mat <- function() {\n  return(\n    matrix(c(\n      0 ,0 ,0 ,0,\n      1 ,0 ,0 ,0, \n      0 ,1 ,0 ,0,\n      0 ,0 ,1 ,0,\n      0 ,0 ,0 ,1,\n      1 ,1 ,0 ,0,\n      1, 0, 1, 0,\n      1, 0, 0, 1,\n      0, 1, 1, 0,\n      0, 1, 0, 1,\n      0, 0, 1, 1,\n      1, 1, 1, 0,\n      1, 1, 0, 1,\n      1, 0, 1, 1,\n      0, 1, 1, 1,\n      1, 1, 1, 1\n    )\n    ,nc = 4\n    ,byrow = TRUE)\n  )\n}\n# \n# #setting classes\n# \n# TrendCounts = setClass(\"TrendCounts\",\n#                        slots = c(x = \"matrix\")\n#                          \n#                          \n#                        \n#                        ,prototype = list(\n#                          x = matrix()\n#                         \n#                        )\n#)\n# setMethod('show', signature(object='TrendCounts'), function(object) {\n#   msg = paste0('Objects Data with ', length(object@data), ' data points')\n#   toShow = object@data\n#   if (5 < length(toShow)) \n#     toShow = paste0(paste0(toShow[1:5], collapse = ', '), '...') else\n#       toShow = paste0(toShow[1:5], collapse = ', ')\n#   msg = c(msg, paste0(\"Object data: \", toShow))\n#   msg = paste0(msg, collapse = '\\n')\n#   cat(msg)\n# })\n# \nTrendCounts = setClass(\"TrendCounts\",\n                      , slots = c(\n                        \"data\" = \"matrix\",\n                        \"opts\" = \"list\"\n                      )\n                      ,prototype = prototype(\n                        data = matrix(),\n                        opts = list()\n                      )\n)\nDoseCounts = setClass(\"DoseCounts\",\n                       , slots = c(\n                         \"data\" = \"matrix\",\n                         \"opts\" = \"list\"\n                       )\n                      ,prototype = prototype(data = matrix()\n                                             ,opts = list()\n                      )\n)\nHistos=setClass(\"Histos\", \n                slots=c(\n                  \"data\"=\"data.frame\",\n                  \"opts\"=\"list\"\n                  )\n                , prototype=prototype(data.frame()\n                                      ,opts=list()\n                )\n)\n\n# setMethod('show', signature(object='DoseCounts'), function(object) {\n#   msg = paste0('Objects Data with ', length(object@data), ' data points')\n#   toShow = object@data\n#   if (5 < length(toShow)) \n#     toShow = paste0(paste0(toShow[1:5], collapse = ', '), '...') else\n#       toShow = paste0(toShow[1:5], collapse = ', ')\n#   msg = c(msg, paste0(\"Object data: \", toShow))\n#   msg = paste0(msg, collapse = '\\n')\n#   cat(msg)\n# })\n\n\n#Documentation scores for plotting\n\nget.documentation.score.dataset <- function(dataset)\n{\n  \n  # Convert x to data table\n  \n  if (\"list\" %in% class(dataset))\n    dataset <- dataset[[1]]\n  if (!\"data.table\" %in% class(dataset))\n    dataset <- data.table(dataset)\n  # Plugin attributes trend\n  generate.attribute.script(m.report.aop.ds, \"dataset\", m.report.aop.script.location)\n  source(m.report.aop.script.location, local = TRUE)\n\n  trend.variables <- m.report.aop.ds[!is.na(trend), variable]\n  trend.groups <- m.report.aop.ds[!is.na(trend), trend]\n  trend.variables <- split(trend.variables, trend.groups)\n  \n  lapply(trend.variables, function(x) {\n    Hist=grep(\"histogram\",(x),v=T)\n    if(length(Hist)!=0){\n      trend.ds <- dataset[, .SD, , .SDcols = x]\n      trend.ds<- trend.ds[!is.na(x), .SD]\n      trend.ds.datum<- trend.ds[, .SD, .SDcols = x]\n      trend.ds.datum=trend.ds.datum[!is.na(eval(parse(text=x))),.SD]\n      labs <- c(sapply(trend.ds.datum, get.variable.labelling))\n      setnames(trend.ds.datum, labs)\n      trend.ds.datum<-Histos(data=trend.ds.datum)\n      trend.ds.datum\n    }else{\n    trend.ds <- dataset[, .SD, , .SDcols = x]\n    disch.dates.names<- names(trend.ds)[grep(\"^disch.date.plot\", names(trend.ds))]\n    \n    trend.ds<- trend.ds[!is.na(disch.dates.names), .SD]\n    data.trend <- sapply(x, function(cl) {\n      return(eval(parse(text=paste0(\"table(dataset[, \", cl, \" == TRUE])\"))))\n    })\n    if (\"list\" %in% class(data.trend)) {\n      data.trend <- sapply(data.trend, function(x) x[\"TRUE\"])\n    }\n    names(data.trend) <- x\n    trend.ds.datum<- trend.ds[, .SD, .SDcols = x]\n    dateVar<-trend.ds.datum[,(eval(parse(text=disch.dates.names)))]\n    trend.ds.datum<- subset(trend.ds.datum, select=!(names(trend.ds.datum) %in% disch.dates.names))  \n    labs <- c(sapply(trend.ds.datum, get.variable.labelling))\n    setnames(trend.ds.datum, labs)\n    trend.ds.datum<- sapply(trend.ds.datum, function(X){\n      ScoreRollingAverage(X\n                          ,dateVar\n                          ,endDate = report.end.date)\n    })\n    nm<- grep(\"erdose\", colnames(trend.ds.datum), v=T)\n    if(length(nm)==0){\n    trend.ds.datum<-TrendCounts(data=trend.ds.datum)\n    trend.ds.datum\n}else if(length(nm)!=0){\n  trend.ds.datum<-DoseCounts(data=trend.ds.datum)\n}else{\n  trend.ds.datum\n}\n}\n  }) -> trend.results\n  \n  return(trend.results)\n}\n\n\n#monthly averages\n\nScoreRollingAverage<- function(docVar\n                               ,dateVar\n                               ,endDate = Sys.Date()\n                               ,rollPeriod = 12L\n                               ,refLevel = NULL\n                               ,lag = 1\n){\n  #browser()\n  # Validation  checks\n  \n  if (!isTRUE(length(docVar) == length(dateVar)))\n    stop(\"The variable with the documentation info should have the same length as it's matching date variable!\")\n  if (!any(c(\"Date\", \"POSIXct\", \"POSIXlt\") %in% class(dateVar)))\n    stop(\"Date variable is not in the correct format!\")\n  if (!any(c(\"Date\", \"POSIXct\", \"POSIXlt\") %in% class(endDate)))\n    stop(\"End date is not in the correct format!\")\n  if (!is.numeric(rollPeriod))\n    stop(\"Roll period must be numeric!\")\n  \n  # Get start date\n  \n  rollYears <- ifelse(rollPeriod >= 12L, floor(rollPeriod /  12L), 0L)\n  rollMths <- ifelse(rollPeriod >= 12L, rollPeriod %% 12L, 12L - rollPeriod)\n  \n  startDate <- as.POSIXlt(endDate)\n  startDate$year <- startDate$year - rollYears\n  startDate$mon <- startDate$mon - rollMths\n  startDate <- as.Date(startDate)\n  \n  ##### Start date edited for all analyses months to begin from October since there were few data points in September 2013\n  #study.start.date\n  startDate[startDate <as.Date(\"2013-09-30\")&(m.hospitals.to.keep==\"Kiambu DH\"|m.hospitals.to.keep==\"Mama Lucy Kibaki H\"|m.hospitals.to.keep==\"Machakos Level 5\"|m.hospitals.to.keep==\"Mbagathi DH\")] <- as.Date(\"2013-10-01\")\n  \n  startDate[startDate <as.Date(\"2013-10-30\")&(m.hospitals.to.keep==\"Vihiga DH\"|m.hospitals.to.keep==\"Kakamega PGH\"|m.hospitals.to.keep==\"Busia DH\"|m.hospitals.to.keep==\"Kitale DH\"|m.hospitals.to.keep==\"Mbale Rural Health DC\")] <- as.Date(\"2013-11-01\")\n  startDate[startDate <as.Date(\"2014-02-28\")&(m.hospitals.to.keep==\"Kerugoya DH\"|m.hospitals.to.keep==\"Karatina DH\"|m.hospitals.to.keep==\"Nyeri PGH\"|m.hospitals.to.keep==\"Embu PGH\"|m.hospitals.to.keep==\"Kisumu East DH\")] <- as.Date(\"2014-03-01\")\n  startDate<- startDate[!is.na(startDate)]\n  #dateVar<- data.table(dateVar)\n  #   dateVar<- sapply(m.hospitals.to.keep, function(x){\n  #     dateVar<- dateVar[as.Date(dateVar)<min(as.Date(startDate))]<-as.Date(NA)\n  #     return(dateVar)\n  #   })\n  # Get non missing date var and corresponding doc var entries\n  \n  dateVar <- as.Date(dateVar)\n  docVar <- docVar[!is.na(dateVar) & dateVar <= endDate & dateVar > startDate]\n  dateVar <- dateVar[!is.na(dateVar) & dateVar <= endDate & dateVar > startDate]\n  \n  # Create boolean variable to hold documentation info \n  \n  if (!is.null(refLevel)) {\n    if (!is.na(refLevel)) {\n      toKeep <- docVar %in% \"TRUE\"\n      docVar <- docVar[toKeep]\n      dateVar <- dateVar[toKeep]\n      docScores <- rep(FALSE, length(docVar))\n      docScores[docVar == refLevel & (docVar %in% \"TRUE\")] <- TRUE\n    }\n  }\n  else {\n    docScores <- rep(TRUE, length(docVar))\n    docScores[docVar %in% c(\"FALSE\")] <- FALSE\n  }\n  \n  # Get month information\n  \n  monthVar <- format(dateVar, \"%Y-%m\")\n  monthPretty <- sapply(dateVar, function(x) {\n    idx <- as.numeric(format(x, \"%m\"))\n    mDict <- seq(1L, 12L, by = lag)\n    names(mDict) <- month.abb[mDict]\n    mChoose <- which(!idx >= mDict)\n    if (length(mChoose) == 0L) {\n      mChoose <- length(mDict)\n    }\n    else {\n      mChoose <- which(!idx >= mDict)[1L] - 1L\n    }\n    return(names(mDict)[mChoose])\n  })\n  #NAs<-monthPretty[grep(\"NA\",monthPretty)]\n  #monthPretty<-monthPretty[monthPretty!=NAs]\n  monthPretty[!is.na(monthPretty)] <- paste0(monthPretty[!is.na(monthPretty)], format(dateVar[!is.na(monthPretty)], \" '%y\"))\n  dataDoc <- data.table(Documentation = docScores, Season = monthVar, Period = monthPretty)\n  dataDoc <- dataDoc[order(Season)]\n  dataDoc[, Season := NULL]\n  \n  # Function to get periodic scores\n  \n  GetDocScore <- function(x) {\n    #browser()\n    s <- length(x[!is.na(x)])\n    d <- table(x)[\"TRUE\"]\n    d <- ifelse(is.na(d), 0L, d)\n    d <- d / s\n    return(d)\n  }\n  \n  # Get data \n  \n  dataDoc <- dataDoc[, GetDocScore(Documentation), by = Period]\n  namesDoc <- dataDoc[, Period]\n  dataDoc <- dataDoc[, V1]\n  names(dataDoc) <- namesDoc\n  \n  return(dataDoc)\n  \n}\n\n#Get documentation from dataset (Used for plotting)\nget.scoreplots.dataset <- function(dataset)\n{  \n  if (\"list\" %in% class(dataset))\n    dataset <- dataset[[1]]\n  if (!\"data.table\" %in% class(dataset))\n    dataset <- data.table(dataset)\n  \n  # Plugin attributes\n  \n  generate.attribute.script(aop.data.source, \"dataset\", m.report.aop.script.location)\n  source(m.report.aop.script.location, local = TRUE)\n  \n  score.variables <- aop.data.source[!is.na(scoregraph), variable]\n  score.groups <- aop.data.source[!is.na(scoregraph), bookmark]\n  score.denom.groups <- aop.data.source[!is.na(scoregraph), denom]\n  score.variables <- split(score.variables, score.groups)\n  score.denom.groups <- split(score.denom.groups,score.groups)\n  mapply(function(x,y) {\n    denom.name <- unique(x) \n    col.struct <- list(denom.name,y)    \n  },score.denom.groups,score.variables) -> scoreplot.results\n  scoreplot.results <- data.table(scoreplot.results)\n  \n  dataset <- dataset[dataset$full.dataset==T,]\n  \n  graph.results <-list()\n  \n  lapply(scoreplot.results,function(x,y,z,a){ \n    \n    cols.to.use <- c(unlist(x[2]), \"hospital.id\",unlist(x[1]))\n    sum.cols <- unlist(x[2])\n    score.dt <- y[!is.na(eval(parse(text=x[1]))) & eval(parse(text=x[1])),cols.to.use,with=FALSE]\n    score.dt <- score.dt[,unlist(x[1]):=NULL]\n    score.dt[,Score:= 0]\n    score.dt[,Score :=rowSums(.SD, na.rm = TRUE),.SDcols=sum.cols]\n    if(unlist(x[1])==\"mal.total\"){\n      low.mal.hosp <- z[very.low.prevalence.malaria.areas]\n      score.dt <- score.dt[!(hospital.id %in% low.mal.hosp) ,(.SD)]\n    }\n    score.dt.raw <- data.table::copy(score.dt)\n    old.names <- names(score.dt.raw)\n    new.names <- gsub(\"hospital.id\",\"Hospital\",old.names)\n    setnames(score.dt.raw,old.names,new.names)\n    score.dt[,Score:=NULL]\n    score.dt <- as.data.frame(score.dt)\n    score.dt <- reshape2:::melt(score.dt,id.vars = c(\"hospital.id\"))  \n    score.dt <- as.data.table(score.dt)\n    score.dt[,key:=.I]\n    setkey(score.dt,key)\n    \n    score.dt <- score.dt[,j=list(round(sum(value, na.rm = T)/length(value[!is.na(value)]),3)), by=c(\"hospital.id\",\"variable\")]\n    setnames(score.dt,c(\"Hospital\",\"Indicator\",\"Score\"))\n    \n    score.dt$Indicator <- sapply(score.dt$Indicator,function(b,c){\n      label <- unique(c$label[c$variable==b & !is.na(c$scoregraph)])[1]\n      return(label)\n    },a)\n    \n    score.dt$Hospital <- factor(score.dt$Hospital, levels =mixedsort(score.dt$Hospital))\n    \n    #Stacked plot\n    c <-  ggplot(score.dt,aes(x = Hospital,y=Score, group=Indicator, fill=Indicator))\n    c <- (c+ geom_bar(position=\"stack\",stat=\"identity\")+ scale_fill_manual(values=brewer.pal(9,\"Set1\"))+theme(legend.position=\"bottom\")\n          +guides(fill=guide_legend(ncol = 3, byrow = TRUE)))\n    \n    #Box plot\n    score.dt.raw$Hospital <- factor(score.dt.raw$Hospital, levels =mixedsort(score.dt.raw$Hospital))\n    \n    \n    d <- ggplot(score.dt.raw,aes(x = Hospital,y=Score))\n    d <- (d+ geom_boxplot(fill=\"#30AB48\"))\n    \n    graph.plot.expr <- list(c,d)\n    class(graph.plot.expr) <- c(\"documentation.plot\",class(graph.plot.expr))\n    \n    return(graph.plot.expr)\n    \n  },dataset, m.hospital.key,aop.data.source) -> graph.expr\n  \n  graph.expr <- list(graph.expr)\n  \n  return(graph.expr)\n}\n\ncat(\"Data munging helper functions loaded!\\n\")\n\n",
    "created" : 1450899367195.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3713345236",
    "id" : "204F9B1F",
    "lastKnownWriteTime" : 1450909599,
    "path" : "F:/SCHOOL/Dissertation/DHS Dataset/R_Codes/src/r/05_data.R",
    "project_path" : "src/r/05_data.R",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}