{
    "contents" : "# \n# \n# cat(\"\\nLoading reporting helper functions...\\n\")\n# \n# # Get cell color code from proportion:\n# #-------------------------------------\n# \n# get.cell.color<-function(cell)\n# {\n#   cell<-tryCatch(as.numeric(cell),warning=function(w) NA,error=function(e) NA)\n#   if (!isTRUE(is.numeric(cell))) stop(\"Non-numeric input!\",call.=F)\n#   cell<-round(cell,2)\n#   ret.val<-\"#FFFFFF\"\n#   if(isTRUE(cell>.9)) ret.val<-\"#CCFFCC\"\n#   if(isTRUE(cell<=.9)) ret.val<-\"#FFFF99\"\n#   if(isTRUE(cell<.8)) ret.val<-\"#FFB2FF\"\n#   if(isTRUE(cell<.6)) ret.val<-\"#FF6666\"\n#   return(ret.val)\n# }\n# \n# # Get cell color codes for a range of proportion values:\n# #-------------------------------------------------------\n# \n# get.cell.colors<-function(values,idx=1:length(values),denom=1)\n# {\n#   if (isTRUE(is.null(values)))\n#   {\n#     stop(\"The input values are null!\",call.=F)\n#   }\n#   values<-values/denom\n#   colors<-rep(\"#FFFFFF\",length(values))\n#   colors[idx]<-sapply(values[idx],get.cell.color)\n#   colors<-paste0(paste0(\"'\",colors,\"'\"),collapse=\",\")\n#   colors<-eval(parse(text=paste0(\"list(\",colors,\")\")))\n#   return(colors)\n# }\n# \n# # Format proportions (aesthetics):\n# #---------------------------------\n# \n# format.proportions<-function(values,denom=1,round.n=2)\n# {\n#   values<-values/denom\n#   counts<-round(values*denom*100,0)\n#   props<-round(values,round.n)\n#   ret.val<-paste0(counts,\"(\",props,\"%)\")\n#   return(ret.val)\n# }\n# \n# # Pad a unit vector with a specific character(normally white space):\n# #--------------------------------------------------------------------\n# \n# pad.with.char<-function(x,char,desired.length=nchar(x),pad.direction=\"center\")\n# {\n#   if(isTRUE(desired.length<=nchar(x))) return(x)\n#   pad.directions.all<-c(\"left\",\"right\",\"center\")\n#   pad.direction.selected<-all(grepl(paste0(\"^\",pad.direction),pad.directions.all)==F)\n#   if(isTRUE(pad.direction.selected)) stop(\"Specify a valid pad direction!\",call.=F)\n#   if(isTRUE(!pad.direction.selected)) \n#     pad.direction.selected<-grep(paste0(\"^\",pad.direction),pad.directions.all,v=T)\n#   if(isTRUE(pad.direction.selected==\"left\"))\n#   {\n#     no.pad<-desired.length-nchar(x)\n#     x<-paste0(c(rep(char,no.pad),x),collapse=\"\")\n#   }\n#   if(isTRUE(pad.direction.selected==\"right\"))\n#   {\n#     no.pad<-desired.length-nchar(x)\n#     x<-paste0(c(x,rep(char,no.pad)),collapse=\"\")\n#   }\n#   if(isTRUE(pad.direction.selected==\"center\"))\n#   {\n#     no.pad<-round((desired.length-nchar(x))/2,0)\n#     x<-paste0(c(rep(char,no.pad),x,rep(char,desired.length-no.pad)),collapse=\"\")\n#   }\n#   return(x) \n# }\n# \n# # Format table titles:\n# #---------------------\n# \n# format.table.titles<-function(titles,width)\n# {\n#   titles<-sapply(titles,function(p) gsub(\"/\",\"\\n/\",p))\n#   titles<-sapply(titles,function(p) gsub(\"\\\\(\",\"\\n\\\\(\",p))\n#   titles.max.width<-max(sapply(titles,function(x)\n#   {\n#     x<-strsplit(x,\"\\n\")[[1]]\n#     x<-sapply(x,nchar)\n#     x<-max(x,na.rm=T)\n#   }),na.rm=T)\n#   titles<-sapply(titles,function(t)\n#   {\n#     t<-strsplit(t,\"\\n\")[[1]]\n#     t<-sapply(t,function(a) pad.with.char(a,char=\" \"\n#                                           ,desired.length=titles.max.width\n#                                           ,pad.direction=\"center\"))\n#     t<-paste0(t,collapse=\"\\n\")\n#   })\n#   names(titles)<-NULL\n#   return(titles)\n# }\n# # Merge period specific skeleton reports:\n# #----------------------------------------\n# \n# merge.period.reports <- function(...)\n# {\n#   m.call <- match.call()\n#   if (length(m.call) > 4L)\n#   {\n#     stop(\"Only three reports required!\")\n#   }\n#   report1 <- m.call[[2L]]\n#   report2 <- m.call[[3L]]\n#   if (length(m.call) == 4L) {\n#     report3 <- m.call[[4L]]\n#   }\n#   else {\n#     report3 <- report2\n#     report2 <- report1\n#   }\n#   m.one.hospital <<- identical(report1, report2)\n#   m.one.hospital<- m.one.hospital[]\n#   final.report <- mapply(function(t1, t2, t3) {\n#     t1[, Value := NULL]\n#     cols.dt <- data.table(Col.Index = t1[, Col], Col.Current = t2[, Col], Col.All = t3[, Col])\n#     t1[, Col := NULL]\n#     if (m.one.hospital)\n#     {\n#       cols.dt[, Col.Current := NULL]\n#     }\n#     \n#     # Renaming\n#     \n#     nam.tmp <- names(t1)\n#     nam.tmp[nam.tmp==\"Proportions\"] <- \"Index\"\n#     setnames(t1, names(t1), nam.tmp)\n#     nam.tmp <- names(t2)\n#     nam.tmp[nam.tmp==\"Proportions\"] <- \"Current\"\n#     setnames(t2, names(t2), nam.tmp)\n#     nam.tmp <- names(t3)\n#     nam.tmp[nam.tmp==\"Proportions\"] <- \"All\"\n#     setnames(t3, names(t3), nam.tmp)\n#     \n#     if (m.one.hospital)\n#     {\n#       t.all <- data.table(t1 , All = t3[, All], cols.dt)\n#     }\n#     else\n#     {\n#       t.all <- data.table(t1, Current = t2[, Current], All = t3[, All], cols.dt)\n#     }\n#     return(t.all)\n#   }, report1, report2, report3)\n#   \n#   return(final.report)\n# }\n# \n# # Merge period specific skeleton reports:\n# #----------------------------------------\n# MergeReportElements = function(...\n#                                , removeDuplicates = FALSE\n#                                , useProportions = FALSE) {\n#   m_Call = match.call()\n#   l_Call <- length(m_Call)\n#   if ('removeDuplicates' %in% names(m_Call)) {\n#     if ('useProportions' %in% names(m_Call)) {\n#       reports = m_Call[-c(1L, l_Call - 1L, l_Call)]\n#     }\n#     else {\n#       reports = m_Call[-c(1L, l_Call)]\n#     }\n#   }\n#   else {\n#     if ('useProportions' %in% names(m_Call)) {\n#       reports = m_Call[-c(1L, l_Call)]\n#     }\n#     else {\n#       reports = m_Call[-1L]\n#     }\n#   }\n#   reports = sapply(reports, as.list)\n#   if (removeDuplicates){\n#     reports = reports[!duplicated(reports)]\n#   } \n#   reports <- apply(reports, 1, function(tabs) {\n#     value = data.table(sapply(tabs, function(t) {\n#       t[, Col]\n#     }))\n#     if(useProportions) {      \n#       value = data.table(sapply(tabs, function(t) {\n#         t[, Proportions]\n#       }), value)\n#       \n#     }else{\n#       value.prop = sapply(tabs, function(t) {\n#         t[, Proportions]\n#       }) \n#       value.fig = sapply(tabs, function(t) {\n#         t[, Figure]\n#       })\n#       res.eval <- mapply(function(x,y){\n#         if(x){\n#           return(y)\n#         }else{\n#           return(\"\")\n#         }\n#       },value.fig[,2:ncol(value.fig)],value.prop[,2:ncol(value.prop)])      \n#       res.eval <- matrix(res.eval,ncol=ncol(value.fig)-1,byrow=FALSE)      \n#       value = data.table(cbind(value.prop[,1],res.eval,value))\n#     }    \n#     setnames(value,flex.table.col.names)\n#     definition = tabs[[1]]\n#     definition = definition[, c('Value', 'Proportions', 'Col','Figure') := NULL]\n#     value = data.table(definition, value)\n#     value\n#   })\n#   reports\n# }\n# \n# # Wrapper to add content to document:\n# #------------------------------------\n# \n# add.content <- function(doc, content, bookmark, hospital.name = \"\")\n# {\n#   \n#   if (\"data.frame\" %in% class(content)) \n#   {\n#     add.table.to.bookmark(doc, content, bookmark, hospital.name)\n#   }\n#   else if (\"VennCounts\" %in% class(content))\n#   {\n#     add.plot.venn.to.bookmark(doc, content, bookmark)\n#   }\n#    else if (\"TrendCounts\"  %in% class(content))\n#    {\n#      add.plots.to.bookmark(doc, content, bookmark)\n#    }\n#   else if (\"DoseCounts\"  %in% class(content))\n#   {\n#     add.plots.to.bookmark(doc, content, bookmark=bookmark)\n#   }\n#   else if (\"Histos\"  %in% class(content))\n#   {\n#     add.plots.to.bookmark(doc, content, bookmark=bookmark)\n#   }\n#   else if (\"ParetoCounts\" %in% class(content))\n#   {\n#     add.plot.pareto.to.bookmark(doc, content, bookmark=\"pareto\")\n#   }\n#   else if(\"documentation.plot\" %in% class(content))\n#   {\n#     add.ggplot.to.bookmark(doc, content, bookmark)\n#   }\n#   else\n#   {\n#     message(\"class\\\"\", c(class(content), colnames(content)),\"\\\"\\nThe content could not be added to the document!\")\n#   }\n# }\n# \n# # Add table to document at a specific location:\n# #----------------------------------------------\n# \n# add.table.to.bookmark <- function(doc, content, bookmark, hospital.name)\n# {\n#   if (!\"data.frame\" %in% class(content))\n#     stop(\"Only a data frame can be added as a table!\")\n#   color.cols <- which(grepl(\"Col.\", names(content)))\n#   color.ds <- as.matrix(content[, .SD, .SDcols = color.cols])\n#   data.cols <- which(!grepl(\"Col.\", names(content)))\n#   content.to.add <- content[, .SD, .SDcols = data.cols]\n#   is.prefix <- any(grepl(\"Indicator\", names(content.to.add)))\n#   flex.tab <- FlexTable(content.to.add, header.columns = FALSE\n#                         ,body.cell.props = tab.val.cell\n#                         ,body.par.props = tab.val.par\n#                         ,body.text.props = tab.val.text\n#                         ,header.cell.props = tab.header.cell\n#                         ,header.par.props = tab.header.par\n#                         ,header.text.props = tab.header.text\n#   )\n#   if (is.prefix) {\n#     flex.tab <- spanFlexTableRows(flex.tab, j = \"Indicator\", runs = content.to.add[, Indicator])\n#   }\n#   flex.tab <- addHeaderRow(flex.tab, value = get.header.labs(content.to.add, hospital.name), \n#                            #                            ,cell.properties = tab.header.cell\n#                            #                            ,par.properties = tab.header.par\n#                            #                            ,text.properties = tab.header.text)\n#   )\n#   cols.to.color <- ifelse(is.prefix, 3L, 2L)\n#   cols.to.color <- seq(cols.to.color, ncol(content.to.add), by = 1L)\n#   for (i in 1L : nrow(content.to.add)) {\n#     for (j in cols.to.color) {\n#       k <- j - ifelse(is.prefix, 2L, 1L)\n#       col <- color.ds[i, k]\n#       if (i %% 2 == 0) {\n#         if (col == \"#FFFFFF\") {\n#           col <- \"#EEE9E3\"\n#         }\n#       }\n#       flex.tab[i, j] <- cellProperties(background.color = color.ds[i, k] ,border.style=\"dashed\")\n#     }\n#   }\n#   \n#   addFlexTable(doc, flex.tab, bookmark = bookmark)\n# }\n# \n# \n# add.outlier.plots.to.bookmark <- function(doc){  \n#   \n#   par(family=\"co\")\n#   \n#   venn.plots <- generate.venn.pareto.plot.expr()\n#   \n#   names(venn.plots) <- c(\"High\",\"Moderate\",\"Low\")\n#   \n#   addPlot(doc, function(){plot.venn(venn.plots$High$adm.plot)}, bookmark = \"high_mal_endomicity\")\n#   addPlot(doc, function(){plot.venn(venn.plots$High$mort.plot)}, bookmark = \"mort_high_mal_endomicity\")\n#   addPlot(doc, function(){plot.venn(venn.plots$Moderate$adm.plot)}, bookmark = \"low_mal_endomicity\")\n#   addPlot(doc, function(){plot.venn(venn.plots$Moderate$mort.plot)}, bookmark = \"mort_low_mal_endomicity\")\n#   addPlot(doc, function(){plot.venn(venn.plots$Low$adm.plot)}, bookmark = \"very_low_mal_endomicity\")\n#   addPlot(doc, function(){plot.venn(venn.plots$Low$mort.plot)}, bookmark = \"mort_very_low_mal_endomicity\")  \n#   addPlot(doc, function(){plot.pareto(venn.plots$High$pareto)}, bookmark = \"pareto_high_mal_endomicity\")\n#   addPlot(doc, function(){plot.pareto(venn.plots$Moderate$pareto)}, bookmark = \"pareto_low_mal_endomicity\")\n#   addPlot(doc, function(){plot.pareto(venn.plots$Low$pareto)}, bookmark = \"pareto_very_low_mal_endomicity\")\n#   \n#   \n#   doc <- addPlot(doc\n#                  ,x = mortality.by.agegroup()\n#                  ,fun = print\n#                  ,bookmark = \"graph_agemort\"\n#   )\n#   doc <- addPlot(doc\n#                  ,x = outcome.by.category()\n#                  ,fun = print\n#                  ,bookmark = \"graph_outcome\"\n#   )\n# }\n# \n# # Add venn plot to document at a specific location:\n# #--------------------------------------------------\n# add.plot.venn.to.bookmark <- function(doc, content, bookmark, ...)\n# {\n#     plot.venn.to.doc <- function(...)\n#     {\n#       if(Sys.info()[\"sysname\"]==\"Windows\"){\n#         windowsFonts(co=\"Corbel\")\n#         par(family=\"co\")\n#       }else{\n#         par(family=\"Ubuntu Light\")\n#       }\n#       plot.venn(object = content,circle.col = c(\"red\", \"blue\", \"green\", \"black\"), ...)\n#     }\n#   addPlot(doc, plot.venn.to.doc, bookmark = bookmark)\n#   \n# }\n# \n# add.plot.to.bookmark <- function(doc, content, bookmark, ...)\n# {\n#   plot.venn.to.doc <- function(...)\n#   {\n#     par(family=\"Ubuntu Light\")\n#     plot.venn(object = content,circle.col = c(\"red\", \"blue\", \"green\", \"black\"), ...)\n#   }\n#   addPlot(doc, plot.venn.to.doc, bookmark = bookmark)\n# }\n# \n# #add pareto to document at a specific location:\n# #_________________________________------------\n# add.plot.pareto.to.bookmark <- function(doc, content, bookmark, ...){\n#   plot.pareto.to.doc <- function(...)\n#   {\n#     if(Sys.info()[\"sysname\"]==\"Windows\"){\n#       windowsFonts(co=\"Corbel\")\n#       par(family=\"co\")\n#     }else{\n#       par(family=\"Ubuntu Light\")\n#     }\n#     plot.pareto(object = content, ...)\n#   }\n#   addPlot(doc, plot.pareto.to.doc, bookmark = bookmark)\n# }\n# \n# # Add documentation trend,histogram and dosage plot to document at a specific location:\n# #------------------------------------------------------------------\n# \n# add.plots.to.bookmark <- function(doc, content, bookmark, ...){ \n#   plot.all.to.doc <- function(...)\n#   {\n#     if(Sys.info()[\"sysname\"]==\"Windows\"){\n#       windowsFonts(co=\"Corbel\")\n#       par(family=\"co\")\n#     }else{\n#       par(family=\"Ubuntu Light\")\n#     }\n#     plot.all(object = content\n#                ,...)\n#   }\n#   \n#   addPlot(doc, plot.all.to.doc,width = 7.5, height = 6, bookmark = bookmark)\n# }\n# \n# get.header.labs <- function(dataset, hospital.name = \"\") {\n#   if (!is.data.frame(dataset))\n#     stop(\"The input is not a data frame!\")\n#   nc <- ncol(dataset)\n#   hospital.names <- report.col.names\n#   \n#   to.add <- nc - length(hospital.names)\n#   to.add <- rep(\"\", to.add)\n#   hospital.names <- c(to.add, hospital.names)\n#   header.row<- FlexRow()\n#   for(i in seq_along(hospital.names))\n#     header.row[i] = FlexCell(value = set_of_paragraphs(pot(hospital.names[i], format = tab.header.text)), \n#                              cell.properties = tab.header.cell, \n#                              par.properties = tab.header.par\n#     )\n#   return(header.row)\n# }\n# \n# \n# # Color Key Dataset\n# \n# get.color.key<- function(doc, bookmark) {\n#   myFTable <- FlexTable(data.table(\n#     Color = rep(\"  \" , 4L)\n#     ,Intepretation = c(\"Excellent documentation\"\n#                        ,\"Good documentation\"\n#                        ,\"Some documentation\"\n#                        ,\"Poor documentation\"\n#     )\n#     ,Range = c(\">90%\", \"80 - 90%\", \"60 - 79%\", \"<60%\")    \n#   )\n#   ,header.columns = FALSE\n#   ,body.cell.props = tab.val.cell\n#   ,body.par.props = tab.val.par\n#   ,body.text.props = tab.val.text\n#   ,header.cell.props = tab.header.cell\n#   ,header.par.props = tab.header.par\n#   ,header.text.props = tab.header.text\n#   )\n#   myFTable <- setFlexTableBackgroundColors( myFTable, j=1, colors = sapply(c(.95, .85, .70, .5), get.cell.color))\n#   doc<- addFlexTable(doc, myFTable, bookmark = bookmark)\n#   return(doc)\n# }\n# \n# get.hospital.key <- function(doc, bookmark, table.key) {\n#   \n#   myFTable <- FlexTable(\n#       table.key,\n#       ,header.columns = T\n#       ,body.cell.props = tab.val.cell\n#       ,body.par.props = tab.val.par\n#       ,body.text.props = tab.val.text\n#       ,header.cell.props = tab.header.cell\n#       ,header.par.props = tab.header.par\n#       ,header.text.props = tab.header.text\n#   )\n#   doc<- addFlexTable(doc, myFTable, bookmark = bookmark)\n#   return(doc)\n# }\n# \n# add.ggplot.to.bookmark <- function(doc,content,bookmark){    \n#   doc <- addPlot(doc,fun=function(){\n#     grid.newpage()\n#     pushViewport(viewport(layout = grid.layout(2, 1)))\n#     print(content[[1]], vp = viewport(layout.pos.row = 1,layout.pos.col = 1))\n#     print(content[[2]], vp = viewport(layout.pos.row = 2,layout.pos.col = 1))\n#   },bookmark=bookmark)\n# }\n# cat(\"Reporting helper functions loaded!\\n\")",
    "created" : 1450899334964.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3915795672",
    "id" : "6A7E10E9",
    "lastKnownWriteTime" : 1450899361,
    "path" : "F:/SCHOOL/Dissertation/DHS Dataset/R_Codes/src/r/04_reporting_helpers.R",
    "project_path" : "src/r/04_reporting_helpers.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}